worker_processes auto; # 工作进程数

error_log /dev/stdout warn; # 指定日志输出路径与级别, 过低的日志级别会带来大量的I/O消耗

events {
  #accept_mutex on; # 规避惊群现象(一个连接将多个进程唤醒,但只有一个进程处理连接),nginx默认开启 连接数多建议关闭
  multi_accept on; # 单个进程是否能同时接受多个链接,连接数不多场景适合开启,较多时建议关闭
  worker_connections  1024; # worker最大连接数
}

http {
  # 文件扩展名与类型映射表
  include mime.types;

  # 默认文件类型
  default_type application/octet-stream;

  # log_format指令，用于定义日志格式 $remote_addr $http_x_forwarded_for为客户端地址 $remote_user客户名称
  # $time_local 访问时间与时区 $request请求url及协议 $status请求状态
  # $body_bytes_sent 发送的body字节 $http_referer 访问来源 $http_user_agent 客户端信息
  log_format        main '$remote_addr - $remote_user [$time_local] "$request" '
                         '$status $body_bytes_sent "$http_referer" '
                         '"$http_user_agent" "$http_x_forwarded_for"';

  # 访问日志
  access_log        /dev/stdout main;

  # 高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。
  # 图片异常可以尝试关闭此项
  sendfile          on;
  # 每个进程调用的传输数量限制, 默认0不限制
  #sendfile_max_chunk          0;
  # 提升网络包的传输效率。如果开启了，服务器需要给客户端发送数据时，并不是立即发送，而是等待一个缓冲区存满后再一起发送
  tcp_nopush        on;
  # 该指令必须在keep-alive连接开启的情况下才生效，来提高网络包传输的'实时性'。有数据就发
  tcp_nodelay        on;

  # 长连接超时时间,nginx默认75s
  #keepalive_timeout 75;
  # 长连接使用次数,nginx默认100
  #keepalive_requests 100;

  server {
    listen       80;
    listen       443 http2; # FIXME: 启用证书情况下改为 listen 443 ssl http2; # http2协议依赖ssl
    server_name  localhost; # FIXME: 启用证书情况下改为 server_name 域名;

    # HSTS策略,要求客户端采用https访问
    add_header      Strict-Transport-Security "max-age=31536000;includeSubDomains;preload" always;

    # 上传文件的大小限制
    #   client_max_body_size 8M;

    # 启用缓冲区
    proxy_buffering on;

    # gzip压缩
    gzip on; # 启用gzip
    gzip_comp_level 5; # 压缩级别, 最大9
    gzip_min_length 1024; # 最小压缩1k
    gzip_buffers 16 8k; # 压缩缓冲区, 16个8k
    gzip_proxied any; # 对代理服务的响应压缩
    gzip_vary on; # 告知客户端支持压缩
    gzip_static always; # 预压缩
    gzip_disable      "MSIE [1-6]\."; # 指定ie6一下不开启gzip压缩
    gzip_types text/plain text/css text/js text/xml text/javascript application/javascript application/json application/xml application/rss+xml image/svg+xml;

    # brotli压缩,需要启用SSl证书, 可以与gzip并存,优先采用brotli,不支持回退到gzip压缩
#     brotli on; # 启用brotli
#     brotli_comp_level 6; # 压缩级别 最大11.
#     brotli_min_length 1k; # 大于等于1k执行压缩
#     brotli_buffers 16 8k; # 压缩缓冲区, 16个8k
#     brotli_vary on; # 告知客户端支持压缩
#     brotli_static always; # 是否允许查找已压缩好的.br文件
#     brotli_types text/plain text/css text/js text/xml text/javascript application/javascript application/json application/xml application/rss+xml image/svg+xml;

    # ssl配置
#     ssl on; # 启用证书
#     ssl_certificate /html/ssl/xxx.pem; # 证书密钥
#     ssl_certificate_key /html/ssl/xxx.key; # 证书key
#     ssl_session_cache    shared:SSL:10m; # 会话重用,提高https性能
#     ssl_session_timeout 5m; # 会话超时时间
#     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; # 加密套件
#     ssl_protocols TLSv1.2 TLSv1.3; # 协议 [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];
#     ssl_prefer_server_ciphers on; # 启用Cipher

    # 负载均衡, location内写入类似 proxy_pass https://backend/;
#     upstream backend {
#       # 根据ip hash分配
#       ip_hash;
#       # 根据响应时间分配
#       fair;
#       # 根据URL hash分配
#       url_hash;
#       hash_methods crc32;
#       # 用法server 192.168.0.1:8080 [option],option可选,down表示不参与负载/weight=1,负载权重/backup当其他机器不可用或繁忙时启用
#       server 192.168.0.1:8080;
#     }

    # 1. 前缀匹配 location /test {} 要求以指定符号开始, 可以命中 host/test, host/test?key=value, host/test/, host/testtest
    # 2. 精确匹配 location =/test {} 精确匹配, 命中 host/test, host/test?key=value 不会匹配 host/test/, host/testtest
    # 3. 正则匹配 location ~^/test {} 或location ~*^/test {} 正则匹配,用在uri中包含正则表达式前,例如^/test,*用来设置不区分大小写
    # 4. 精确捕获匹配 location ^~ 等同于location /test {},只是命中后会停止匹配其他模式
    # 5. location @name {}, 定义location,以便内部定向使用
    # 6. 通配匹配 location / {}
    # 优先级: 粒度越细越优先, 精确匹配 > 精确捕获匹配 > 正则匹配 > 前缀匹配 > 通配匹配
    # 访问网站域名
#     location ~ \.(?:js|css|gif|jpg|jpeg|webp|png|bmp|swf|woff2?|eot|otf|ttf|svg|apng)$ {
#       add_header      Last-Modified $date_gmt;
#       expires       90d;
#       rewrite       ^/(.*) /$1 break;
#     }

    root   /www; # FIXME: 修改为实际的资源部署位置
    location / {
      index  index.html index.htm;
      try_files $uri $uri/ /index.html =404; # 路由history模式可以启用
      # 入口文件不缓存
      if ($uri ~ .*\.(htm|html)$) {
         add_header Cache-Control no-cache; # 入口文件不缓存
      }
      # 静态资源添加缓存设置
      if ($uri ~ \.(?:js|css|gif|jpg|jpeg|webp|png|bmp|swf|woff2?|eot|otf|ttf|svg|apng)$) {
        add_header      Last-Modified $date_gmt;
        expires       90d;
      }
    }

    # 设置出现对应的错误码后如何处理
    error_page   500 502 503 504  /50x.html;
    # =500的作用是将状态更改为500
#     error_page   500 502 503 504 =500 /50x.html;

    location = /50x.html {
      # root指定根路径 alias 路径别名, 例如: /usr/local/images/test.png 路径下有图片资源
      # location /images { root /usr/local; }, 此时访问路径为host/images/test.png
      # 如果使用alias: location /images { alias /usr/local; },host/images/test.png将不可访问,调整为location /images/ { alias /usr/local/images/; }
      # root的逻辑是: root路径+location路径,alias的逻辑是: 用alias路径替换location路径
      root   /www;
      # 指定默认返回的首页,如果没指定具体资源,则多个值依次返回,找到1个返回为止
      index index.html index.htm;
    }
  }
}
